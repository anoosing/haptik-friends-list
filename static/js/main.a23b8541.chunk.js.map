{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","paginateData","data","page","list","indexOfLastName","indexOfFirstName","currentList","slice","pageCount","Math","ceil","length","setState","currentPage","getData","fetch","headers","then","response","json","friendsJson","sortList","friendsList","friendsListDefault","componentDidMount","updateFriendName","event","error","target","value","trim","test","friendName","addFriend","state","filter","friend","name","toLowerCase","addToList","concat","isFavourite","searchFriendText","preventDefault","searchFriend","filteredFriends","includes","fav","unfav","sort","a","b","localeCompare","forEach","item","push","updateFavourite","newList","index","findIndex","friends","deleteFriend","resetSearch","handlePageClick","selected","className","type","placeholder","this","onChange","onClick","onSubmit","map","previousLabel","nextLabel","breakLabel","breakClassName","forcePage","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a23b8541.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport ReactPaginate from 'react-paginate';\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friendName: \"\",\n      friendsList: [],\n      friendsListDefault: [],\n      searchFriendText: \"\",\n      error: \"\",\n      pageCount: 0,\n      currentPage: 0\n    }\n  }\n  paginateData = (data, page = 1) => {\n    let list = data,\n    indexOfLastName = page * 4,\n    indexOfFirstName = indexOfLastName - 4,\n    currentList = list.slice(indexOfFirstName, indexOfLastName),\n    pageCount = Math.ceil((list.length) / 4);\n    this.setState({ pageCount, currentPage: 0 });\n    return currentList;\n  }\n  getData = () => {\n    fetch('mockFriendsData.json'\n      , {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      }\n    )\n      .then((response) => response.json())\n      .then(friendsJson => {\n        friendsJson = this.sortList(friendsJson);\n        this.setState({ friendsList: this.paginateData(friendsJson), friendsListDefault: friendsJson })\n      })\n  }\n  componentDidMount = () => {\n    this.getData();\n  }\n  updateFriendName = (event) => {\n    let error = ' ';\n    if (event.target.value.trim() !== '' && !/^[a-zA-Z ]*$/.test(event.target.value)) {\n      error = 'Name can consists of alphabets only.'\n    }\n    this.setState({ error, friendName: event.target.value });\n  }\n  addFriend = (event) => {\n    let error = '';\n    if (this.state.friendName.trim() === '') {\n      error = 'Please enter a name.'\n    } else if (!/^[a-zA-Z ]*$/.test(this.state.friendName)) {\n      error = 'Name can consists of alphabets only.'\n    } else if (this.state.friendName.length < 3) {\n      error = 'Name should be of atleast 3 characters.';\n    } else if (this.state.friendsListDefault.filter(friend => friend.name.trim('').toLowerCase() === this.state.friendName.trim().toLowerCase()).length) {\n      error = 'Name already exists.';\n    }\n    if (!error) {\n      let addToList = this.state.friendsListDefault.concat([{ name: this.state.friendName, isFavourite: false }]);\n      addToList = this.sortList(addToList);\n      this.setState({ error: \"\", searchFriendText: \"\", friendName: \"\", friendsList: this.paginateData(addToList), friendsListDefault: addToList });\n    }\n    else {\n      this.setState({ error });\n    }\n    event.preventDefault();\n  }\n  searchFriend = (event) => {\n    let filteredFriends = this.state.friendsListDefault.filter(friend => friend.name.toLowerCase().includes(event.target.value.toLowerCase()));\n    this.setState({ error: \"\", friendsList: this.paginateData(filteredFriends), searchFriendText: event.target.value });\n  }\n  sortList = (list) => {\n    let fav = [], unfav = [];\n    list.sort((a, b) => a.name.localeCompare(b.name))\n    list.forEach(item => {\n      if (item.isFavourite)\n        fav.push(item);\n      else\n        unfav.push(item);\n    });\n\n    return [...fav, ...unfav];\n  }\n  updateFavourite = (friend) => {\n    let newList = [...this.state.friendsListDefault];\n    let index = this.state.friendsListDefault.findIndex(friends => friends.name === friend.name);\n    if (index > -1) newList[index] = { ...newList[index], isFavourite: !newList[index].isFavourite }\n    newList = this.sortList(newList);\n    this.setState({ error: \"\", searchFriendText: \"\", friendName: \"\", friendsList: this.paginateData(newList), friendsListDefault: newList });\n  }\n  deleteFriend = (friend) => {\n    let newList = this.state.friendsListDefault.filter(friends => friends.name !== friend.name);\n    newList = this.sortList(newList);\n    this.setState({ error: \"\", searchFriendText: \"\", friendName: \"\", friendsList: this.paginateData(newList), friendsListDefault: newList });\n  }\n  resetSearch = () => {\n    let filteredFriends = this.state.friendsListDefault.slice();\n    this.setState({ error: \"\", friendsList: this.paginateData(filteredFriends), searchFriendText: \"\" });\n  }\n  handlePageClick = data => {\n    this.setState({ friendsList: this.paginateData(this.state.friendsListDefault, data.selected + 1), currentPage: data.selected });\n  }\n  render() {\n    return (\n      <div className=\"friends\">\n        <div className=\"container friends-wrapper\">\n          <div className=\"friends-list-label\">\n            <span className=\"input-group\">\n              <span className=\"label\"><b>Friends List</b></span>\n              <input className=\"search-friends form-control\" type=\"text\" placeholder=\"Search friend's...\"\n                value={this.state.searchFriendText} onChange={this.searchFriend}>\n              </input>\n              <span className=\"input-group-addon\">\n                {this.state.searchFriendText ? <i onClick={this.resetSearch} className=\"fa fa-close\"></i> : <i className=\"fa fa-search\"></i>}\n              </span>\n            </span>\n          </div>\n          <form onSubmit={this.addFriend}>\n            <input className=\"add-friend-input\" type=\"text\" placeholder=\"Enter your friend's name\"\n              value={this.state.friendName} onChange={this.updateFriendName}>\n            </input>\n            {!!this.state.error.length && <div className=\"small-font error-msg\">{this.state.error}</div>}\n          </form>\n          <div>\n            {\n              this.state.friendsList.map((friend, index) =>\n              (\n                <div className=\"friends-list\" key={index}>\n                  <div className=\"friend-list-name\">\n                    <div>{friend.name}</div>\n                    <div className=\"small-font\">is your friend</div>\n                  </div>\n                  <div className=\"friends-list-icons\">\n                    <span onClick={() => this.updateFavourite(friend)}>\n                      {\n                        friend.isFavourite ? <i className=\"fa fa-star\"></i> : <i className=\"fa fa-star-o\"></i>\n                      }\n                    </span>\n                    <i onClick={() => this.deleteFriend(friend)} className=\"fa fa-trash\"></i>\n                  </div>\n                </div>\n              )\n              )\n            }\n          </div>\n          <div className=\"friends-list-paginator\">\n            <ReactPaginate\n              previousLabel={'<'}\n              nextLabel={'>'}\n              breakLabel={'...'}\n              breakClassName={'break-me'}\n              pageCount={this.state.pageCount}\n              forcePage={this.state.currentPage}\n              marginPagesDisplayed={2}\n              pageRangeDisplayed={5}\n              onPageChange={this.handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/bootstrap.min.css';\nimport './assets/css/fontawesome.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}